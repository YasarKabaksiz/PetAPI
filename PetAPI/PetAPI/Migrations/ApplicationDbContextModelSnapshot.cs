// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetAPI.Data;

#nullable disable

namespace PetAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetAPI.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectValue")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlacementArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Evcil hayvanın açlığını biraz giderir.",
                            EffectValue = 15,
                            ImageUrl = "/images/items/small-food.png",
                            ItemType = "Food",
                            Name = "Küçük Mama",
                            Price = 10
                        },
                        new
                        {
                            Id = 2,
                            Description = "Evcil hayvanın açlığını büyük oranda giderir.",
                            EffectValue = 40,
                            ImageUrl = "/images/items/big-food.png",
                            ItemType = "Food",
                            Name = "Büyük Mama",
                            Price = 25
                        },
                        new
                        {
                            Id = 3,
                            Description = "Evcil hayvanın açlığını tamamen giderir.",
                            EffectValue = 100,
                            ImageUrl = "/images/items/tasty-treat.png",
                            ItemType = "Food",
                            Name = "Lezzetli Ödül",
                            Price = 50
                        },
                        new
                        {
                            Id = 4,
                            Description = "Evcil hayvanın mutluluğunu artırır.",
                            EffectValue = 20,
                            ImageUrl = "/images/items/ball-toy.png",
                            ItemType = "Toy",
                            Name = "Top",
                            Price = 20
                        },
                        new
                        {
                            Id = 5,
                            Description = "Evcil hayvanın mutluluğunu büyük oranda artırır.",
                            EffectValue = 50,
                            ImageUrl = "/images/items/scratching-post.png",
                            ItemType = "Toy",
                            Name = "Kedi Tırmalama Tahtası",
                            Price = 45
                        },
                        new
                        {
                            Id = 6,
                            Description = "Evcil hayvanın mutluluğunu tamamen artırır.",
                            EffectValue = 100,
                            ImageUrl = "/images/items/plush-toy.png",
                            ItemType = "Toy",
                            Name = "Peluş Oyuncak",
                            Price = 80
                        },
                        new
                        {
                            Id = 7,
                            Description = "Geceleri yıldızlarla dolu güzel bir duvar kağıdı.",
                            ImageUrl = "/images/items/starry-wall.png",
                            ItemType = "Decoration",
                            Name = "Yıldızlı Gece Duvarı",
                            PlacementArea = "Wall",
                            Price = 100
                        },
                        new
                        {
                            Id = 8,
                            Description = "Yeşil orman manzarası ile huzurlu bir atmosfer.",
                            ImageUrl = "/images/items/forest-wall.png",
                            ItemType = "Decoration",
                            Name = "Orman Manzarası Duvarı",
                            PlacementArea = "Wall",
                            Price = 120
                        },
                        new
                        {
                            Id = 9,
                            Description = "Doğal ahşap parke zemin.",
                            ImageUrl = "/images/items/wooden-floor.png",
                            ItemType = "Decoration",
                            Name = "Ahşap Parke",
                            PlacementArea = "Floor",
                            Price = 80
                        },
                        new
                        {
                            Id = 10,
                            Description = "Sıcak ve yumuşak halı zemin.",
                            ImageUrl = "/images/items/soft-carpet.png",
                            ItemType = "Decoration",
                            Name = "Yumuşak Halı",
                            PlacementArea = "Floor",
                            Price = 90
                        });
                });

            modelBuilder.Entity("PetAPI.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int?>("FloorItemId")
                        .HasColumnType("int");

                    b.Property<int>("Happiness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("Hunger")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WallItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pets", (string)null);
                });

            modelBuilder.Entity("PetAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("User");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PetAPI.Entities.UserInventory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("UserInventories", (string)null);
                });

            modelBuilder.Entity("PetAPI.Entities.Pet", b =>
                {
                    b.HasOne("PetAPI.Entities.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetAPI.Entities.UserInventory", b =>
                {
                    b.HasOne("PetAPI.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetAPI.Entities.User", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
